<?php

declare(strict_types=1);

namespace {{namespace}}Http\Controllers\Backend;

use Illuminate\Http\Request;
use Rinvex\Fort\Models\Role;
use Rinvex\Fort\Models\User;
use Rinvex\Fort\Models\Ability;
use {{namespace}}Http\Controllers\AuthorizedController;
use {{namespace}}Http\Requests\Backend\UserFormRequest;

class UsersController extends AuthorizedController
{
    /**
     * {@inheritdoc}
     */
    protected $resource = 'users';

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $users = User::paginate(config('rinvex.fort.items_per_page'));

        return view('backend.users.index', compact('users'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \{{namespace}}Http\Requests\Backend\UserFormRequest $request
     *
     * @return \Illuminate\Http\Response
     */
    public function store(UserFormRequest $request)
    {
        return $this->process($request, new User());
    }

    /**
     * Update the given resource in storage.
     *
     * @param \{{namespace}}Http\Requests\Backend\UserFormRequest $request
     * @param \Rinvex\Fort\Models\User $user
     *
     * @return \Illuminate\Http\Response
     */
    public function update(UserFormRequest $request, User $user)
    {
        return $this->process($request, $user);
    }

    /**
     * Delete the given resource from storage.
     *
     * @param \Rinvex\Fort\Models\User $user
     *
     * @return \Illuminate\Http\Response
     */
    public function delete(User $user)
    {
        $user->delete();

        return intend([
            'url' => route('backend.users.index'),
            'with' => ['warning' => trans('messages.user.deleted', ['userId' => $user->id])],
        ]);
    }

    /**
     * Show the form for create/update of the given resource.
     *
     * @param \Rinvex\Fort\Models\User $user
     *
     * @return \Illuminate\Http\Response
     */
    public function form(User $user)
    {
        $countries = array_map(function ($country) {
            return $country['name'];
        }, countries());

        $languages = array_map(function ($language) {
            return $language['name'];
        }, languages());

        $abilities = Ability::all()->groupBy('resource')->map->pluck('name', 'id')->toArray();

        $roles = Role::all()->pluck('name', 'id')->toArray();
        $genders = ['m' => trans('common.male'), 'f' => trans('common.female')];

        return view('backend.users.form', compact('user', 'abilities', 'roles', 'countries', 'languages', 'genders'));
    }

    /**
     * Process the form for store/update of the given resource.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Rinvex\Fort\Models\User $user
     *
     * @return \Illuminate\Http\Response
     */
    protected function process(Request $request, User $user)
    {
        // Prepare required input fields
        $data = $request->all();

        // Save user
        $user->fill($data)->save();

        return intend([
            'url' => route('backend.users.index'),
            'with' => ['success' => trans('messages.user.saved', ['userId' => $user->id])],
        ]);
    }
}
